;
; Copyright (c) 2014-2019 Jim Tremblay
;
; This Source Code Form is subject to the terms of the Mozilla Public
; License, v. 2.0. If a copy of the MPL was not distributed with this
; file, You can obtain one at http://mozilla.org/MPL/2.0/.
;

    .SECTION    program,CODE,ALIGN

    .GLB        __GetIPL
    .GLB        $_SetIPL
    .GLB        __GetI
    .GLB        $_SetI
    .GLB        _nOS_SwitchContextHandler
    .GLB        _nOS_SwitchContextFromIsrHandler

    .GLB        _nOS_runningThread
    .GLB        _nOS_highPrioThread

__GetIPL:
    ; Copy FLG register into working register
    STC     FLG,        R0

    ; Keep only IPL bits from FLG register
    AND.W   #0x7000,    R0

    ; Return from subroutine
    RTS
    NOP

$_SetIPL:
    ; Copy FLG register into working register
    STC     FLG,        R0

    ; Clear IPL bits from FLG register
    AND.W   #0x8FFF,    R0

    ; Write IPL into working register
    OR.W    R1,         R0

    ; Copy working register into FLG register
    LDC     R0,         FLG
    NOP

    ; Return from subroutine
    RTS
    NOP

__GetI:
    ; Copy FLG register into working register
    STC     FLG,        R0

    ; Keep only I bit from FLG register
    AND.W   #0x0040,    R0

    ; Return from subroutine
    RTS
    NOP

$_SetI:
    ; Copy FLG register into working register
    STC     FLG,        R0

    ; Clear I bit from FLG register
    AND.W   #0xFFBF,    R0

    ; Write I into working register
    OR.W    R1,         R0

    ; Copy working register into FLG register
    LDC     R0,         FLG
    NOP

    ; Return from subroutine
    RTS
    NOP

_nOS_SwitchContextHandler:
    ; Push all registers on thread stack
    PUSHM   R0,R1,R2,R3,A0,A1,SB,FB

    ; Save SP to nOS_Thread object of current running thread
    MOV.W   _nOS_runningThread,     A0
    STC     SP,                     [A0]

    ; Copy nOS_highPrioThread to nOS_runningThread
    MOV.W   _nOS_highPrioThread,    _nOS_runningThread

    ; Restore SP from nOS_Thread object of high prio thread
    MOV.W   _nOS_highPrioThread,    A0
    LDC     [A0],                   SP

    ; Pop all registers from thread stack
    POPM    R0,R1,R2,R3,A0,A1,SB,FB

    ; Return from interrupt
    REIT
    NOP

_nOS_SwitchContextFromIsrHandler:
    ; Push all registers on thread stack
    PUSHM   R0,R1,R2,R3,A0,A1,SB,FB

    ; Move PC and FLG from ISTACK to USTACK
    STC     ISP,                    A0
    MOV.W   0[A0],                  16[SP]
    MOV.W   2[A0],                  18[SP]

    ; Adjust ISTACK (remove PC and FLG)
    ADD.W   #4,                     A0
    LDC     A0,                     ISP

    ; Save SP to nOS_Thread object of current running thread
    MOV.W   _nOS_runningThread,     A0
    STC     SP,                     [A0]

    ; Copy nOS_highPrioThread to nOS_runningThread
    MOV.W   _nOS_highPrioThread,    _nOS_runningThread

    ; Restore SP from nOS_Thread object of high prio thread
    MOV.W   _nOS_highPrioThread,    A0
    LDC     [A0],                   SP

    ; Pop all registers from thread stack
    POPM    R0,R1,R2,R3,A0,A1,SB,FB

    ; Return from interrupt
    REIT
    NOP

    .END
